{"version":3,"sources":["components/header/Header.js","components/field/Field.js","components/main/index.jsx","components/main/Main.js","components/App.js","index.js"],"names":["Header","score","className","Field","state","gameOver","gameWin","isGameContinue","startNewGame","setState","props","onNewGame","continueGame","onClick","this","items","gameWinRender","setGameOver","setGameWin","map","item","value","id","React","Component","Main","x","y","isDone","changesWasDone","isGameOver","isGameWin","checkKey","e","keyCode","preventDefault","moveTop","moveBottom","moveLeft","moveRight","newGame","newGameCells","cell","setRandomCell","cells","i","j","forEach","cel","index","currentVal","nextVal","nextDone","currentDone","totalVal","afterKeyUp","freeCells","onChangeScore","simulateMoves","find","console","log","noMoves","simulateMoveBottom","simulateMoveTop","simulateMoveRight","simulateMoveLeft","noMove","a","cellNum","Math","floor","random","cellVal","newArr","window","addEventListener","removeEventListener","App","addScore","newScore","gameEnd","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c559b61.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Header.scss';\r\n\r\nexport const Header = ({\r\n    score,\r\n}) => (\r\n  <header className={'header'}>\r\n      <div className=\"header__score\">\r\n          Your score: <span className='header__text'> { score } </span>\r\n      </div>\r\n  </header>\r\n);\r\n","import React from 'react';\r\n\r\nimport './Field.scss';\r\n\r\nexport class Field extends React.Component {\r\n  state = {\r\n    gameOver: false,\r\n    gameWin: false,\r\n    isGameContinue: false,\r\n  }\r\n\r\n  startNewGame = () => {\r\n    this.setState({\r\n      gameOver: false,\r\n      gameWin: false,\r\n      isGameContinue: false,\r\n    })\r\n\r\n    this.props.onNewGame();\r\n  }\r\n\r\n  continueGame = () => {\r\n    this.setState({\r\n        isGameContinue: true,\r\n    })\r\n  }\r\n\r\n  setGameOver() {\r\n    return (\r\n        <li className=\"game-over\">\r\n          <button\r\n              className=\"game-over__button\"\r\n              onClick={this.startNewGame}\r\n          >\r\n            NewGame\r\n          </button>\r\n        </li>\r\n    )\r\n  }\r\n\r\n  setGameWin() {\r\n    return (\r\n        <li className=\"game-over\">\r\n          <button\r\n              className=\"game-over__button\"\r\n              onClick={this.startNewGame}\r\n          >\r\n            NewGame\r\n          </button>\r\n          <button className=\"game-over__button\"\r\n                  onClick={this.continueGame}\r\n          >\r\n            Continue\r\n          </button>\r\n        </li>\r\n    )\r\n  }\r\n\r\n    render() {\r\n    const { items, gameWin }= this.props;\r\n    const { isGameContinue } = this.state;\r\n    let gameOver = null;\r\n    let gameWinRender = null;\r\n\r\n    if (this.props.gameOver) {\r\n      gameOver = this.setGameOver();\r\n    }\r\n\r\n    if (gameWin && !isGameContinue) {\r\n        gameWinRender = this.setGameWin();\r\n    }\r\n\r\n    return (\r\n        <ul className={'field'}>\r\n          {gameWinRender}\r\n          {gameOver}\r\n          {items.map(item => (\r\n            <li\r\n                className={'field__item'}\r\n                key={item.id}\r\n            >\r\n              {item.value}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n    );\r\n  }\r\n}\r\n","// export { Main } from './Main';\r\nimport Main from \"./Main\";\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { Field } from '../field/';\r\n\r\nimport './Main.scss'\r\n\r\nclass Main extends React.Component {\r\n    state = {\r\n        items: [\r\n            {id: 0, x: 0, y: 0, value: null, isDone: false,},\r\n            {id: 1, x: 1, y: 0, value: null, isDone: false,},\r\n            {id: 2, x: 2, y: 0, value: null, isDone: false,},\r\n            {id: 3, x: 3, y: 0, value: null, isDone: false,},\r\n            {id: 4, x: 0, y: 1, value: null, isDone: false,},\r\n            {id: 5, x: 1, y: 1, value: null, isDone: false,},\r\n            {id: 6, x: 2, y: 1, value: null, isDone: false,},\r\n            {id: 7, x: 3, y: 1, value: null, isDone: false,},\r\n            {id: 8, x: 0, y: 2, value: null, isDone: false,},\r\n            {id: 9, x: 1, y: 2, value: null, isDone: false,},\r\n            {id: 10, x: 2, y: 2, value: null, isDone: false,},\r\n            {id: 11, x: 3, y: 2, value: null, isDone: false,},\r\n            {id: 12, x: 0, y: 3, value: null, isDone: false,},\r\n            {id: 13, x: 1, y: 3, value: null, isDone: false,},\r\n            {id: 14, x: 2, y: 3, value: null, isDone: false,},\r\n            {id: 15, x: 3, y: 3, value: null, isDone: false,},\r\n        ],\r\n        changesWasDone: false,\r\n        score: 0,\r\n        isGameOver: false,\r\n        isGameWin: false,\r\n        isGameContinue: false,\r\n    };\r\n\r\n    moveLeft() {\r\n        const cells = [...this.state.items];\r\n\r\n        for(let i = 3; i > 0; i--) {\r\n\r\n            for(let j = 3; j > 0; j--) {\r\n\r\n                cells.forEach((cel, index) => {\r\n                    if(cel.x === j && cel.value !== null) {\r\n                        const currentVal = cel.value;\r\n                        const nextVal = cells[index - 1].value;\r\n                        const nextDone = cells[index - 1].isDone;\r\n                        const currentDone = cel.isDone;\r\n\r\n                        if(currentVal === nextVal && !nextDone && !currentDone) {\r\n                            let totalVal = currentVal + nextVal;\r\n\r\n\r\n                            cells[index - 1].value += currentVal;\r\n                            cells[index - 1].isDone = true;\r\n                            cel.value = null;\r\n                            cel.isDone = true;\r\n                            this.setState((state) => {\r\n                                return {\r\n                                    changesWasDone: true,\r\n                                    score: state.score + totalVal,\r\n                                }\r\n                            });\r\n                        } else if (nextVal === null) {\r\n                            cells[index - 1].value += currentVal;\r\n                            cel.value = null;\r\n                            this.setState({\r\n                                changesWasDone: true,\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        cells.forEach(e => e.isDone = false);\r\n\r\n        this.setState({\r\n            items: cells,\r\n        });\r\n\r\n        this.afterKeyUp()\r\n    };\r\n\r\n    moveRight() {\r\n        const cells = [...this.state.items];\r\n\r\n        for(let i = 3; i > 0; i--) {\r\n\r\n            for(let j = 2; j >= 0; j--) {\r\n\r\n                cells.forEach((cel, index) => {\r\n                    if(cel.x === j && cel.value !== null) {\r\n                        const currentVal = cel.value;\r\n                        const nextVal = cells[index + 1].value;\r\n                        const nextDone = cells[index + 1].isDone;\r\n                        const currentDone = cel.isDone;\r\n\r\n                        if(currentVal === nextVal && !nextDone && ! currentDone) {\r\n                            const totalVal = currentVal + nextVal;\r\n\r\n\r\n                            cells[index + 1].value += currentVal;\r\n                            cells[index + 1].isDone = true;\r\n                            cel.value = null;\r\n                            cel.isDone = true;\r\n                            this.setState((state) => {\r\n                                return {\r\n                                    changesWasDone: true,\r\n                                    score: state.score + totalVal,\r\n                                }\r\n                            });\r\n                        } else if (nextVal === null) {\r\n                            cells[index + 1].value += currentVal;\r\n                            cel.value = null;\r\n                            this.setState({\r\n                                changesWasDone: true,\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        cells.forEach(e => e.isDone = false);\r\n\r\n        this.setState({\r\n            items: cells,\r\n        });\r\n\r\n        this.afterKeyUp()\r\n    };\r\n\r\n    moveTop() {\r\n        const cells = [...this.state.items];\r\n\r\n        for(let i = 3; i > 0; i--) {\r\n\r\n            for(let j = 1; j <= 3; j++) {\r\n\r\n                cells.forEach((cel, index) => {\r\n                    if(cel.y === j && cel.value !== null) {\r\n                        const currentVal = cel.value;\r\n                        const nextVal = cells[index - 4].value;\r\n                        const nextDone = cells[index - 4].isDone;\r\n                        const currentDone = cel.isDone;\r\n\r\n                        if(currentVal === nextVal && !nextDone && !currentDone) {\r\n                            const totalVal = currentVal + nextVal;\r\n\r\n                            cells[index - 4].value += currentVal;\r\n                            cells[index - 4].isDone = true;\r\n                            cel.value = null;\r\n                            cel.isDone = true;\r\n                            this.setState((state) => {\r\n                                return {\r\n                                    changesWasDone: true,\r\n                                    score: state.score + totalVal,\r\n                                }\r\n                            });\r\n                        } else if (nextVal === null) {\r\n                            cells[index - 4].value += currentVal;\r\n                            cel.value = null;\r\n                            this.setState({\r\n                                changesWasDone: true,\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        cells.forEach(e => e.isDone = false);\r\n\r\n        this.setState({\r\n            items: cells,\r\n        });\r\n\r\n        this.afterKeyUp()\r\n    };\r\n\r\n    moveBottom() {\r\n        const cells = [...this.state.items];\r\n\r\n        for(let i = 3; i > 0; i--) {\r\n\r\n            for(let j = 2; j >= 0; j--) {\r\n\r\n                cells.forEach((cel, index) => {\r\n                    if(cel.y === j && cel.value !== null) {\r\n                        const currentVal = cel.value;\r\n                        const nextVal = cells[index + 4].value;\r\n                        const nextDone = cells[index + 4].isDone;\r\n                        let currentDone = cel.isDone;\r\n\r\n                        if(currentVal === nextVal && !nextDone && !currentDone) {\r\n                            const totalVal = currentVal + nextVal;\r\n\r\n                            cells[index + 4].value += currentVal;\r\n                            cells[index + 4].isDone = true;\r\n                            cel.isDone = true;\r\n                            cel.value = null;\r\n\r\n                            this.setState((state) => {\r\n                                return {\r\n                                    changesWasDone: true,\r\n                                    score: state.score + totalVal,\r\n                                }\r\n                            });\r\n                        } else if (nextVal === null) {\r\n                            cells[index + 4].value += currentVal;\r\n                            cel.value = null;\r\n                            this.setState({\r\n                                changesWasDone: true,\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        cells.forEach(e => e.isDone = false);\r\n\r\n        this.setState({\r\n            items: cells,\r\n        });\r\n\r\n        this.afterKeyUp()\r\n    };\r\n\r\n    afterKeyUp() {\r\n        let freeCells = 0;\r\n\r\n        this.props.onChangeScore(this.state.score);\r\n        this.setState({\r\n            score: 0,\r\n        })\r\n        this.state.items.forEach(cell => {\r\n            if(cell.value === null) {\r\n                freeCells++\r\n            }\r\n        });\r\n\r\n        if (this.state.changesWasDone && freeCells > 1) {\r\n            this.setRandomCell();\r\n            this.setRandomCell();\r\n            freeCells -= 2;\r\n        } else if (this.state.changesWasDone && freeCells > 0) {\r\n            this.setRandomCell();\r\n            freeCells -= 1;\r\n        }\r\n\r\n        if (freeCells === 0) {\r\n            this.simulateMoves();\r\n        }\r\n\r\n        const gameWin = this.state.items.find(cell => cell.value === 2048);\r\n\r\n        if (gameWin) {\r\n            console.log(1992)\r\n            this.setState({\r\n                isGameWin: true,\r\n            })\r\n        }\r\n\r\n        this.setState({\r\n            changesWasDone: false,\r\n        });\r\n\r\n        freeCells = 0;\r\n    };\r\n\r\n    simulateMoves() {\r\n        let noMoves = 0;\r\n\r\n        noMoves += this.simulateMoveBottom();\r\n        noMoves += this.simulateMoveTop();\r\n        noMoves += this.simulateMoveRight();\r\n        noMoves += this.simulateMoveLeft();\r\n\r\n        if(noMoves === 48) {\r\n           this.setState({\r\n               isGameOver: true,\r\n           })\r\n        } else {\r\n            this.setState({\r\n                noMove: 0,\r\n            })\r\n        }\r\n    }\r\n\r\n    simulateMoveBottom() {\r\n        const cells = [...this.state.items];\r\n        let a = 0;\r\n\r\n        cells.forEach((cel, index) => {\r\n            if(cel.y !== 3) {\r\n                const currentVal = cel.value;\r\n                const nextVal = cells[index + 4].value;\r\n\r\n                if(currentVal !== nextVal) {\r\n                    a++;\r\n                }\r\n            }\r\n        });\r\n\r\n        return a;\r\n    }\r\n\r\n    simulateMoveTop() {\r\n        const cells = [...this.state.items];\r\n        let a = 0;\r\n\r\n        cells.forEach((cel, index) => {\r\n            if(cel.y !== 0) {\r\n                const currentVal = cel.value;\r\n                const nextVal = cells[index - 4].value;\r\n\r\n                if(currentVal !== nextVal) {\r\n                    a++;\r\n                }\r\n            }\r\n        });\r\n\r\n        return a;\r\n    }\r\n\r\n    simulateMoveRight() {\r\n        const cells = [...this.state.items];\r\n        let a = 0;\r\n\r\n        cells.forEach((cel, index) => {\r\n            if(cel.x !== 3) {\r\n                const currentVal = cel.value;\r\n                const nextVal = cells[index + 1].value;\r\n\r\n                if(currentVal !== nextVal) {\r\n                    a++;\r\n                }\r\n            }\r\n        });\r\n\r\n        return a;\r\n    }\r\n\r\n    simulateMoveLeft() {\r\n        const cells = [...this.state.items];\r\n        let a = 0;\r\n\r\n        cells.forEach((cel, index) => {\r\n            if(cel.y !== 0) {\r\n                const currentVal = cel.value;\r\n                const nextVal = cells[index - 1].value;\r\n\r\n                if(currentVal !== nextVal) {\r\n                    a++;\r\n                }\r\n            }\r\n        });\r\n\r\n        return a;\r\n    }\r\n\r\n    checkKey = (e) => {\r\n\r\n\r\n        if (e.keyCode === 38) {\r\n            e.preventDefault();\r\n            this.moveTop();\r\n        }\r\n        else if (e.keyCode === 40) {\r\n            e.preventDefault();\r\n            this.moveBottom();\r\n        }\r\n        else if (e.keyCode === 37) {\r\n            e.preventDefault();\r\n            this.moveLeft();\r\n        }\r\n        else if (e.keyCode === 39) {\r\n            e.preventDefault();\r\n            this.moveRight();\r\n        }\r\n    };\r\n\r\n    setRandomCell() {\r\n        const cellNum = Math.floor(Math.random() * (15));\r\n        const cellVal = Math.floor(Math.random() * (10));\r\n\r\n        if(this.state.items[cellNum].value !== null) {\r\n            this.setRandomCell()\r\n        } else {\r\n            const newArr = [...this.state.items];\r\n            newArr[cellNum].value = cellVal < 9 ? 2 : 4;\r\n\r\n            this.setState({\r\n                items: newArr,\r\n            });\r\n        }\r\n    };\r\n\r\n    newGame = () =>  {\r\n\r\n        const newGameCells = [...this.state.items];\r\n        newGameCells.map(cell => cell.value = null);\r\n\r\n        this.setState({\r\n            score: 0,\r\n            items: newGameCells,\r\n            isGameOver: false,\r\n            isGameWin: false,\r\n        })\r\n\r\n        this.setRandomCell();\r\n        this.setRandomCell();\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.checkKey);\r\n        this.setRandomCell();\r\n        this.setRandomCell();\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.checkKey);\r\n    }\r\n\r\n    render() {\r\n        const { items, isGameOver, isGameWin}  = this.state;\r\n\r\n        return (\r\n            <main className={'main'}>\r\n                <Field\r\n                    items={ items }\r\n                    onNewGame={this.newGame}\r\n                    gameOver={isGameOver}\r\n                    gameWin={isGameWin}\r\n                />\r\n            </main>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { Header } from './header/';\r\nimport Main from './main/';\r\n\r\nimport './App.scss';\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        score: 0,\r\n    };\r\n\r\n    addScore = (newScore) => {\r\n        this.setState((state) => {\r\n            return {\r\n                score: state.score + newScore,\r\n            }\r\n        })\r\n    };\r\n\r\n    gameEnd = () => {\r\n\r\n    }\r\n\r\n    render() {\r\n        const { score } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <Header score={score}/>\r\n                <Main onChangeScore={this.addScore} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}